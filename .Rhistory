coord_flip()
ggplot(data = data, aes(x = color, fill = color)) +
geom_bar(position = position_dodge(), width = 0.85) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = color)) +
geom_bar(position = position_dodge(), width = 0.85) +
coord_flip()
coord_flip()
coord_flip()
#4.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Color") +
coord_flip()
#4.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Color") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = color)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
help("facet_grid")
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_grid(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_grid(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank())
help("facet_grid")
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_grid(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank())
help("facet_grid")
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_grid(vars(spine), margins = "spine:") +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank())
help("facet_wrap")
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank())
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
help("facet_wrap")
mpg
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
facet_wrap(vars(cyl, drv), labeller = "label_both")
#5.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine)) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine), labeller = label_both()) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
help("facet_wrap")
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine), labeller = label_both) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
#6.
summary(data)
data %>%
group_by(color, y) %>%
summarise(Avg = mean(satell), Sd = sd(satell), IRQ = IQR(satell))
data
#6.
data %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), IRQ = IQR(weight))
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- c("0" = "At least 1 Sattelite",
"1" = "No Sattelite")
data
#2.
table(data$y, data$spine)
#3.
tb <- table(data$color, data$spine, data$y)
str(tb)
tb[4, ,]
#4.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Color") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = color)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
#5.
labels()
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine), labeller = label_both) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
#6.
data %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), IRQ = IQR(weight))
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
data
levels(data$y) <- c("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- c("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
levels(data$y) <- c(1 = "At least 1 Sattelite",
0 = "No Sattelite")
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
levels(data$y) <- c(1 = "At least 1 Sattelite",
0 = "No Sattelite")
levels(data$y) <- c("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$y) <- c("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- c("0" = "At least 1 Sattelite",
"1" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- c("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- recode("1" = "At least 1 Sattelite",
"0" = "No Sattelite")
levels(data$y) <- recode(data$y,
"1" = "At least 1 Sattelite",
"0" = "No Sattelite")
data
#1.
data <- read_table("crabs.txt", col_names = TRUE) %>%
select(c(color, spine, width, satell, weight, y))
factor_cols <- c("color", "spine", "y")
data[factor_cols] <- lapply(data[factor_cols], factor)
levels(data$color) <- c("2" = "light",
"3" = "medium",
"4" = "dark",
"5" = "darker")
levels(data$spine) <- c("1" = "Both Good",
"2" = "One Worn/Broken",
"3" = "Both Worn/Broken")
levels(data$y) <- recode(data$y,
"0" = "At least 1 Sattelite",
"1" = "No Sattelite")
data
#2.
table(data$y, data$spine)
#3.
tb <- table(data$color, data$spine, data$y)
str(tb)
tb[4, ,]
#4.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Color") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
#4.
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Color") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
ggplot(data = data, aes(x = spine, fill = color)) +
geom_bar(position = position_dodge(), width = 0.85) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank()) +
coord_flip()
#5.
labels()
ggplot(data = data, aes(x = color, fill = y)) +
geom_bar(position = position_dodge(), width = 0.85) +
facet_wrap(vars(spine), labeller = label_both) +
labs(x = "Female Crab Spine Condition") +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45))
#6.
data %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), IRQ = IQR(weight))
#6.
data %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), Median = median(weight), IRQ = IQR(weight))
geom_point(aes(color=y,position=position_dodge(width=0.5))
#7.
ggplot(data = data, aes(x = y)) +
geom_boxplot() +
geom_point(aes(color=y,position=position_dodge(width=0.5)))
#7.
ggplot(data = data, aes(x = y)) +
geom_boxplot() +
geom_point(aes(color=y),position=position_dodge(width=0.5))
#7.
ggplot(data = data, aes(x = y, y = weight)) +
geom_boxplot() +
geom_point(aes(color=y),position=position_dodge(width=0.5))
#7.
ggplot(data = data, aes(x = y, y = weight)) +
geom_boxplot()
#7.
ggplot(data = data, aes(x = y, y = weight)) +
geom_boxplot() +
geom_jitter()
help("geom_jitter")
#7.
ggplot(data = data, aes(x = y, y = weight)) +
geom_boxplot() +
geom_jitter(aes(fill = y))
help("geom_jitter")
#7.
ggplot(data = data, aes(x = y, y = weight)) +
geom_boxplot() +
geom_jitter(aes(colour = y))
data
ggplot(data = data, aes(x = y, y = width)) +
geom_boxplot() +
geom_jitter(aes(colour = y))
# 8.
cor(data$weight, data$width)
ggplot(data = data, aes(x = weight, y = width)) +
geom_point()
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_abline()
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_line()
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_smooth() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, shape = color)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, color = color)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, color = color, shape = y)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, shape = y)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colours = color)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
data
ggplot(data = data, aes(x = weight, y = width)) +
geom_point(aes(colors = color)) +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colors = color)) +
geom_point(aes(colors = color)) +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colors = color)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, shape = y)) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width)) +
geom_point(shape = y) +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width)) +
geom_point() +
geom_smooth(aes(shape = y), method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width), colour = colour) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
data
ggplot(data = data, aes(x = weight, y = width), colour = color) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width), colour = color) +
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color))+
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color))+
geom_point(shape = y) +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color, shape = y))+
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color))+
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color, shape = y))+
geom_point() +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color)) +
geom_point(aes(shape = y)) +
geom_smooth(method = lm, col = "Blue")
ggplot(data = data, aes(x = weight, y = width, colour = color)) +
geom_point(aes(shape = y)) +
geom_smooth(method = lm, col = "Blue") +
labs(title = "Weight vs Width")
library("httr")
library(jsonlite)
food <- GET("https://api.spoonacular.com/recipes/findByNutrients&apiKey=0bf60d64a65d49a88c64d4f4e8565b1d")
food
food_p <- fromJSON(rawToChar(food$content))
knitr::opts_chunk$set(echo = TRUE)
business <- GET("https://newsapi.org/v2/top-headlines/?country=us&category=business&from=2022-09-01&language=en&apiKey=0bf60d64a65d49a88c64d4f4e8565b1d")
business_parsed <- fromJSON(rawToChar(business$content))
business
food <- GET("https://api.spoonacular.com/recipes/findByNutrients&apiKey=f700034fea8340739d62d9b6f2e62430")
food
food <- GET("https://api.spoonacular.com/recipes/complexSearch&apiKey=f700034fea8340739d62d9b6f2e62430")
food
business
httr::GET(paste("https://api.spoonacular.com/food/menuItems/"), query = "f700034fea8340739d62d9b6f2e62430")
httr::GET(paste("https://api.spoonacular.com/food/menuItems/"), query = "f700034fea8340739d62d9b6f2e62430")$Status
food <- GET("https://api.spoonacular.com/recipes/complexSearch&apiKey=f700034fea8340739d62d9b6f2e62430")
GET("https://api.spoonacular.com/recipes/complexSearch&apiKey=f700034fea8340739d62d9b6f2e62430")
GET("https://api.spoonacular.com/recipes/complexSearch/&apiKey=f700034fea8340739d62d9b6f2e62430")
GET("https://api.spoonacular.com/food/menuItems/&apiKey=f700034fea8340739d62d9b6f2e62430")
GET("https://api.spoonacular.com/recipes/complexSearch?query=pasta&maxFat=25&number=2&apiKey=f700034fea8340739d62d9b6f2e62430")
food <- GET("https://api.spoonacular.com/recipes/complexSearch?query=pasta&maxFat=25&number=2&apiKey=f700034fea8340739d62d9b6f2e62430")
food <- GET("https://api.spoonacular.com/recipes/complexSearch?query=pasta&maxFat=25&apiKey=f700034fea8340739d62d9b6f2e62430")
food
food_p <- fromJSON(rawToChar(food$content))
food_p
food <- GET("https://api.spoonacular.com/recipes/findByNutrients?minCarbs=10&maxCarbs=50&apiKey=f700034fea8340739d62d9b6f2e62430")
food_p <- fromJSON(rawToChar(food$content))
food_p
typeof(food_p)
food_d <- as_tibble(food_p)
food_d
food <- GET("https://api.spoonacular.com/recipes/findByNutrients?&apiKey=f700034fea8340739d62d9b6f2e62430")
food
food_p <- fromJSON(rawToChar(food$content))
food_p
food <- GET("https://api.spoonacular.com/recipes/findByNutrients?minCarbs=50&apiKey=f700034fea8340739d62d9b6f2e62430")
food_p <- fromJSON(rawToChar(food$content))
food_d <- as_tibble(food_p)
food_d
food <- GET("https://api.spoonacular.com/recipes/findByNutrients?minCarbs=1&apiKey=f700034fea8340739d62d9b6f2e62430")
food_p <- fromJSON(rawToChar(food$content))
food_d <- as_tibble(food_p)
food_d
food <- GET("https://api.spoonacular.com/recipes/findByNutrients?maxCarbs=800&apiKey=f700034fea8340739d62d9b6f2e62430")
food_p <- fromJSON(rawToChar(food$content))
food_d <- as_tibble(food_p)
food_d
movies <- GET("http://www.omdbapi.com/?i=tt3896198&apikey=9987f1dc")
movies
movies_p <- fromJSON(rawToChar(movies$content))
movies_p
movies_d <- as_tibble(movies_p)
movies_d
ing <- GET("https://api.spoonacular.com/recipes/findByIngredients?ingredients=apples,+flour,+sugar&apiKey=f700034fea8340739d62d9b6f2e62430")
ing
ing_p <- fromJSON(rawToChar(ing$content))
ing_p
ing_d <- as_tibble(ing_p)
ing_d
crime <- GET("https://api.usa.gov/crime/fbi/sapi/api/summarized/agencies/AL0450100/aggravated-assault/1999/2019&apiKey=YBolBgCzO8uWOYd4tFPtNgIaIrWpZ3Lbd4c5i989")
crime
crime <- GET("https://api.usa.gov/crime/fbi/sapi/api/summarized/agencies/AL0620200/burglary/1998/2019?API_KEY=YBolBgCzO8uWOYd4tFPtNgIaIrWpZ3Lbd4c5i989")
crime
crime_str <- fromJSON(rawToChar(crime$content))
crime_str
crime_df
crime_df <- s_tibble(crime_str)
crime_df <- as_tibble(crime_str)
crime_str
crime_str$results
demo <- GET("https://api.usa.gov/crime/fbi/sapi/api/data/nibrs/bribery/victim/states/nc/?API_KEY=iiHnOKfno2Mgkt5AynpvPpUQTEyxE77jo1RU8PIv")
demo
crime <- GET("https://api.usa.gov/crime/fbi/sapi/api/summarized/state/nc/burglary/1998/2019?API_KEY=iiHnOKfno2Mgkt5AynpvPpUQTEyxE77jo1RU8PIv")
crime
crime_parsed <- fromJSON(rawToChar(crime$content))
crime_parsed
crime_parsed$results
